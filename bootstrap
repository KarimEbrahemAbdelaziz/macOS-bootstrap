#!/bin/bash

# Big Nerd Ranch iOS/Mac Machine Bootstrap Script
# Heavily based on thoughtbot's laptop script https://github.com/thoughtbot/laptop/blob/master/mac

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}


shellrc_path() {
  local path current_shell

  current_shell="$( basename "$SHELL" )"

  if [[ $current_shell = "zsh" ]]; then
    if [[ -w "$HOME/.zshrc.local" ]]; then
      path="$HOME/.zshrc.local"
    else
      path="$HOME/.zshrc"
    fi
  elif [[ "$current_shell" = "bash" ]]; then
    path="$HOME/.bash_profile"
  else
    echo "/dev/stdout"
    return 1
  fi

  if [[ ! -e "$path" ]]; then
      touch "$path"
  fi

  if [[ ! -w "$path" ]]; then
    fancy_echo "Cannot write to $path"
    echo "/dev/stdout"
    return 1
  fi

  echo "$path"
}


append_to_shellrc() {
  local text="$1" rcpath
  local skip_new_line="${2:-0}"

  rcpath="$(shellrc_path)"

  if ! grep -Fqs "$text" "$rcpath" >/dev/null 2>&1; then
    if [[ "$skip_new_line" -eq 1 ]]; then
      printf "%s\n" "$text" >> "$rcpath"
    else
      printf "\n%s\n" "$text" >> "$rcpath"
    fi
  fi
}


# die MESSAGE: logs MESSAGE and then exits non-zero
#
# Example:
#
#     writable "$directory" || die "not writable: $directory"
die() {
    local message

    # ${FUNCNAME[1]} evaluates to the name of the calling function.
    message="${FUNCNAME[1]}: $1"
    echo "$1" 1>&2
    exit 1
}


announce_editing_shell_runconfig() {
  startup_path=$(shellrc_path)
  if [[ "$?" -ne 0 ]]; then
    fancy_echo "Don't know how to hack your $SHELL rcfile. Intended changes will be logged using bash syntax; feel free to adapt to your shell."
  else
    fancy_echo "Shell startup configuration will be added to: $startup_path"
  fi
  append_to_shellrc '# Added by Big Nerd Ranch iOS/Mac Machine Bootstrap Script'
}


ensure_homebrew_prefix_usable() {
  HOMEBREW_PREFIX="$(brew --prefix)"
  if [[ ! -e "$HOMEBREW_PREFIX" ]]; then
    HOMEBREW_PREFIX="/usr/local"
  fi

  current_group_name="$(id -ng)"
  if [[ -d "$HOMEBREW_PREFIX" ]]; then
    if [[ ! -r "$HOMEBREW_PREFIX" ]]; then
      sudo chown -R "$LOGNAME:$current_group_name" "$HOMEBREW_PREFIX" \
          || die "failed to change ownership of $HOMEBREW_PREFIX"
    fi
  else
    sudo mkdir "$HOMEBREW_PREFIX" \
      || die "failed to mkdir $HOMEBREW_PREFIX"
    sudo chflags norestricted "$HOMEBREW_PREFIX" \
      || die "failed to chflags norestricted $HOMEBREW_PREFIX"
    sudo chown -R "$LOGNAME:$current_group_name" "$HOMEBREW_PREFIX" \
      || die "failed to change ownership of $HOMEBREW_PREFIX"
  fi
}

update_homebrew() {
  if ! command -v brew >/dev/null; then
    fancy_echo "Installing Homebrew ..."
      curl -fsS \
        'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

      append_to_shellrc '# recommended by brew doctor'

      # shellcheck disable=SC2016
      append_to_shellrc 'export PATH="$HOMEBREW_PREFIX/bin:$PATH"' 1

      export PATH="$HOMEBREW_PREFIX/bin:$PATH"
  fi

  if brew list | grep -Fq brew-cask; then
    fancy_echo "Uninstalling old Homebrew-Cask ..."
    brew uninstall --force brew-cask \
      || die "failed to uninstall brew-cask"
  fi

  fancy_echo "Updating Homebrew formulae ..."
  brew update
  brew bundle --file=- <<EOF
# Unix
brew "git"
brew "openssl"

# GitHub
brew "hub"

# iOS/Mac
brew "carthage"

# Programming languages
brew "rbenv"
brew "ruby-build"

EOF

  if [[ -r Brewfile.local ]]; then
    fancy_echo "Installing local brews from Brewfile.local"
    brew bundle --file=Brewfile.local
  fi
}


adopt_latest_ruby() {
  fancy_echo "Configuring Ruby ..."
  find_latest_ruby() {
    rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
  }

  ruby_version="$(find_latest_ruby)"
  # shellcheck disable=SC2016
  append_to_shellrc 'eval "$(rbenv init - --no-rehash)"' 1
  eval "$(rbenv init -)"

  if ! rbenv versions | grep -Fq "$ruby_version"; then
    RUBY_CONFIGURE_OPTS=--with-openssl-dir="$HOMEBREW_PREFIX/opt/openssl" rbenv install -s "$ruby_version"
  fi

  rbenv global "$ruby_version"
  rbenv shell "$ruby_version"
  gem update --system
}


install_or_update_gem() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}


setup_bundler() {
  install_or_update_gem 'bundler'
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))
}


run_bootstrap_local() {
  if [[ -f "bootstrap.local" ]]; then
    fancy_echo "Running your customizations from bootstrap.local ..."
    # shellcheck disable=SC1091
    . "bootstrap.local"
  fi
}


main() {
  announce_editing_shell_runconfig
  ensure_homebrew_prefix_usable
  update_homebrew
  adopt_latest_ruby
  setup_bundler
  run_bootstrap_local
}


main
