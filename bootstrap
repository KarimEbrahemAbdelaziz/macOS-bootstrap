#!/bin/bash

# Big Nerd Ranch iOS/Mac Machine Bootstrap Script
# Heavily based on thoughtbot's laptop script https://github.com/thoughtbot/laptop/blob/master/mac

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

shellrc_path() {
  local path current_shell

  current_shell="$( basename "$SHELL" )"

  if [[ $current_shell = "zsh" ]]; then
    if [ -w "$HOME/.zshrc.local" ]; then
      path="$HOME/.zshrc.local"
    else
      path="$HOME/.zshrc"
    fi
  elif [[ "$current_shell" = "bash" ]]; then
    path="$HOME/.bash_profile"
  else
    fancy_echo "You're using a shell other than Zsh or Bash"
    return 1
  fi

  if [ ! -e "$path" ] ; then
      touch "$path"
  fi

  if [ ! -w "$path" ] ; then
    fancy_echo "Cannot write to $path"
    return 1
  fi

  echo "$path"
}

append_to_shellrc() {
  local text="$1" rcpath
  local skip_new_line="${2:-0}"

  rcpath="$(shellrc_path)"

  if [ "$?" -ne 0 ]; then
    echo "Unable to resolve your shell's startup config file path" 1>&2
    exit 1
  fi

  if ! grep -Fqs "$text" "$rcpath"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$rcpath"
    else
      printf "\n%s\n" "$text" >> "$rcpath"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

HOMEBREW_PREFIX="$(brew --prefix)"
if [ ! -e "$HOMEBREW_PREFIX" ] ; then
  HOMEBREW_PREFIX="/usr/local"
fi

# Check for supported shell
startup_path=$(shellrc_path)
fancy_echo "Shell startup configuration will be added to: $startup_path"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

append_to_shellrc '# Added by Big Nerd Ranch iOS/Mac Machine Bootstrap Script'

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_shellrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_shellrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update
brew bundle --file=- <<EOF

# Unix
brew "git"
brew "openssl"

# GitHub
brew "hub"

# iOS/Mac
brew "carthage"

# Programming languages
brew "rbenv"
brew "ruby-build"

EOF

if [ -r Brewfile.local ]; then
  fancy_echo "Installing local brews from Brewfile.local"
  brew bundle --file=Brewfile.local
fi

fancy_echo "Configuring Ruby ..."
find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

ruby_version="$(find_latest_ruby)"
# shellcheck disable=SC2016
append_to_shellrc 'eval "$(rbenv init - --no-rehash)"' 1
eval "$(rbenv init -)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
rbenv shell "$ruby_version"
gem update --system
gem_install_or_update 'bundler'
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

if [ -f "bootstrap.local" ]; then
  fancy_echo "Running your customizations from bootstrap.local ..."
  # shellcheck disable=SC1091
  . "bootstrap.local"
fi
